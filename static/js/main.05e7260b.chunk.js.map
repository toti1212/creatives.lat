{"version":3,"sources":["components/Footer/Footer.module.scss","components/FolksList/FolksList.module.scss","serviceWorker.js","components/FolksList/index.jsx","components/Footer/index.jsx","components/Header/index.jsx","components/App.jsx","containers/AppContainer.jsx","index.js","components/Header/Header.module.scss"],"names":["module","exports","Boolean","window","location","hostname","match","FolksList","className","styles","container","join","href","target","rel","join_btn_primary","list_wrapper","title","iframe","src","frameborder","onmousewheel","width","Footer","role","footer","icon","faCoffee","faHeart","Header","header","aria-label","App","Fragment","process","REACT_APP_GTM_KEY","ReactGA","initialize","AppContainer","this","props","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,OAAS,yB,2ECA3BD,EAAOC,QAAU,CAAC,iBAAmB,oCAAoC,UAAY,6BAA6B,OAAS,0BAA0B,KAAO,wBAAwB,SAAW,4BAA4B,iBAAmB,sC,6CCW1NC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mECUSC,EAzBG,kBAChB,yBAAKC,UAAWC,IAAOC,WACrB,yBAAKF,UAAWC,IAAOE,MACrB,uBACEC,KAAK,yCACLC,OAAO,SACPC,IAAI,sBACJN,UAAWC,IAAOM,kBAJpB,aASF,yBAAKP,UAAWC,IAAOO,cACrB,4BACEC,MAAM,WACNT,UAAWC,IAAOS,OAClBC,IAAI,sFACJC,YAAY,IACZC,aAAa,GACbC,MAAM,Y,+BCLCC,EAXA,kBACb,4BAAQC,KAAK,cAAchB,UAAWC,IAAOgB,QAC3C,wCACY,kBAAC,IAAD,CAAiBC,KAAMC,MADnC,KACkD,IAChD,kBAAC,IAAD,CAAiBD,KAAME,MAFzB,MAEwC,IACtC,uBAAGhB,KAAK,wCAAR,YAHF,OAGkE,IAChE,uBAAGA,KAAK,4CAAR,qB,gBCESiB,EAXA,kBACb,yBAAKrB,UAAWC,IAAOqB,QACrB,0BAAMtB,UAAWC,IAAOQ,OAAxB,gBACgB,IACd,0BAAMO,KAAK,MAAMO,aAAW,QAA5B,mBCMSC,EARH,kBACV,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,QCJAC,mKAAYC,mBACdC,IAAQC,WAAWH,mKAAYC,mB,IAQlBG,E,uKAHX,OAAO,kBAAC,EAAQC,KAAKC,W,GAFEC,IAAMC,W,eCDjCC,EAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBOxI5BzD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.05e7260b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__7dIj9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"airtable_wrapper\":\"FolksList_airtable_wrapper__2XLN0\",\"container\":\"FolksList_container__3Le2a\",\"iframe\":\"FolksList_iframe__39oG8\",\"join\":\"FolksList_join__29U4Q\",\"join_btn\":\"FolksList_join_btn__3qamc\",\"join_btn_primary\":\"FolksList_join_btn_primary__1EpN9\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport styles from \"./FolksList.module.scss\";\n\nconst FolksList = () => (\n  <div className={styles.container}>\n    <div className={styles.join}>\n      <a\n        href=\"https://airtable.com/shrF82kEiWKYnDfAb\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className={styles.join_btn_primary}\n      >\n        + Unirme\n      </a>\n    </div>\n    <div className={styles.list_wrapper}>\n      <iframe\n        title=\"airtable\"\n        className={styles.iframe}\n        src=\"https://airtable.com/embed/shrop6uMqZdemJmDD?backgroundColor=yellow&viewControls=on\"\n        frameborder=\"0\"\n        onmousewheel=\"\"\n        width=\"100%\"\n      ></iframe>\n    </div>\n  </div>\n);\n\nexport default FolksList;\n","import { faCoffee, faHeart } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport styles from \"./Footer.module.scss\";\n\nconst Footer = () => (\n  <footer role=\"contentinfo\" className={styles.footer}>\n    <p>\n      Made with <FontAwesomeIcon icon={faCoffee} /> &{\" \"}\n      <FontAwesomeIcon icon={faHeart} /> by{\" \"}\n      <a href=\"https://www.instagram.com/_toti1212/\">toti1212</a> and{\" \"}\n      <a href=\"https://www.instagram.com/criaturaalegre\">criaturaalegre</a>\n    </p>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport styles from \"./Header.module.scss\";\n\nconst Header = () => (\n  <nav className={styles.header}>\n    <span className={styles.title}>\n      Creatives.lat{\" \"}\n      <span role=\"img\" aria-label=\"icon\">\n        ðŸŽ¨\n      </span>\n    </span>\n  </nav>\n);\n\nexport default Header;\n","import FolksList from \"./FolksList/index.jsx\";\nimport Footer from \"./Footer/index.jsx\";\nimport Header from \"./Header/index.jsx\";\nimport React from \"react\";\n\nconst App = () => (\n  <React.Fragment>\n    <Header />\n    <FolksList />\n    <Footer />\n  </React.Fragment>\n);\n\nexport default App;\n","import App from \"../components/App.jsx\";\nimport React from \"react\";\nimport ReactGA from \"react-ga\";\n\n// Google Analytics initializer\nif (process.env.REACT_APP_GTM_KEY) {\n  ReactGA.initialize(process.env.REACT_APP_GTM_KEY);\n}\n\nclass AppContainer extends React.Component {\n  render() {\n    return <App {...this.props} />;\n  }\n}\nexport default AppContainer;\n","import './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport AppContainer from './containers/AppContainer.jsx';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\",\"title\":\"Header_title__3SEjb\"};"],"sourceRoot":""}